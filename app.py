#!/usr/bin/env python3
import os
import uuid
import requests
import time
from flask import Flask, render_template, request, jsonify, send_from_directory
from werkzeug.utils import secure_filename
import threading
from summarize_interview import transcribe, summarize_with_ollama

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # 500 MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
app.config['RESULTS_FOLDER'] = 'results'

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['RESULTS_FOLDER'], exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ollama - –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def init_ollama():
    ollama_host = os.environ.get("OLLAMA_HOST", "http://localhost:11434")
    print(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ollama –Ω–∞ {ollama_host}...")
    
    # –ñ–¥–µ–º, –ø–æ–∫–∞ Ollama –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞
    max_retries = 30
    for i in range(max_retries):
        try:
            response = requests.get(f"{ollama_host}/api/tags")
            if response.status_code == 200:
                print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–Ω–∞")
                break
        except Exception:
            pass
        
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Ollama... ({i+1}/{max_retries})")
        time.sleep(5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ llama3.2
    try:
        response = requests.get(f"{ollama_host}/api/tags")
        models = response.json().get("models", [])
        model_exists = any(model.get("name") == "llama3.2" for model in models)
        
        if not model_exists:
            print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ llama3.2...")
            response = requests.post(
                f"{ollama_host}/api/pull",
                json={"name": "llama3.2"},
            )
            print("‚úÖ –ú–æ–¥–µ–ª—å llama3.2 –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Ollama: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=init_ollama, daemon=True).start()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
processing_status = {}

@app.route('/')
def index():
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    history = get_processing_history()
    return render_template('index.html', history=history)

def get_processing_history():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    history = []
    
    # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã summary_*.txt –≤ –ø–∞–ø–∫–µ results
    summary_files = [f for f in os.listdir(app.config['RESULTS_FOLDER']) 
                    if f.endswith('_summary.txt') and os.path.isfile(os.path.join(app.config['RESULTS_FOLDER'], f))]
    
    for summary_file in summary_files:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º task_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        task_id = summary_file.replace('_summary.txt', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript_file = f"{task_id}_transcript.txt"
        transcript_path = os.path.join(app.config['RESULTS_FOLDER'], transcript_file)
        
        if os.path.exists(transcript_path):
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            timestamp = os.path.getmtime(os.path.join(app.config['RESULTS_FOLDER'], summary_file))
            date_created = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(timestamp))
            
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            with open(os.path.join(app.config['RESULTS_FOLDER'], summary_file), 'r', encoding='utf-8') as f:
                summary_preview = f.read(200)
                if len(summary_preview) == 200:
                    summary_preview += '...'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.append({
                'task_id': task_id,
                'date': date_created,
                'summary_preview': summary_preview
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    history.sort(key=lambda x: x['date'], reverse=True)
    
    return history

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
    
    file = request.files['file']
    
    if file.filename == '':
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
    
    if file:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
        task_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–º–µ–Ω–µ–º
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], f"{task_id}_{filename}")
        file.save(file_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        processing_status[task_id] = {
            'status': 'processing',
            'progress': 0,
            'message': '–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞...'
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=process_file, args=(file_path, task_id)).start()
        
        return jsonify({'task_id': task_id})

def process_file(file_path, task_id):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –Ω–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        processing_status[task_id] = {
            'status': 'processing',
            'progress': 10,
            'message': '–†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å...'
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcript = transcribe(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcript_path = os.path.join(app.config['RESULTS_FOLDER'], f"{task_id}_transcript.txt")
        with open(transcript_path, 'w', encoding='utf-8') as f:
            f.write(transcript)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏
        processing_status[task_id] = {
            'status': 'processing',
            'progress': 50,
            'message': '–°–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏...'
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏
        summary = summarize_with_ollama(transcript)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏
        summary_path = os.path.join(app.config['RESULTS_FOLDER'], f"{task_id}_summary.txt")
        with open(summary_path, 'w', encoding='utf-8') as f:
            f.write(summary)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        processing_status[task_id] = {
            'status': 'completed',
            'progress': 100,
            'message': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            'transcript': transcript,
            'summary': summary
        }
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        os.remove(file_path)
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        processing_status[task_id] = {
            'status': 'error',
            'progress': 0,
            'message': f'–û—à–∏–±–∫–∞: {str(e)}'
        }

@app.route('/status/<task_id>', methods=['GET'])
def get_status(task_id):
    if task_id not in processing_status:
        return jsonify({'error': '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
    
    return jsonify(processing_status[task_id])

@app.route('/download/<task_id>/<file_type>', methods=['GET'])
def download_file(task_id, file_type):
    if file_type not in ['transcript', 'summary']:
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'}), 400
    
    filename = f"{task_id}_{file_type}.txt"
    return send_from_directory(app.config['RESULTS_FOLDER'], filename, as_attachment=True)

@app.route('/view/<task_id>', methods=['GET'])
def view_result(task_id):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ task_id"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    summary_path = os.path.join(app.config['RESULTS_FOLDER'], f"{task_id}_summary.txt")
    transcript_path = os.path.join(app.config['RESULTS_FOLDER'], f"{task_id}_transcript.txt")
    
    if not os.path.exists(summary_path) or not os.path.exists(transcript_path):
        return jsonify({'error': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 404
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    with open(summary_path, 'r', encoding='utf-8') as f:
        summary = f.read()
    
    with open(transcript_path, 'r', encoding='utf-8') as f:
        transcript = f.read()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    return jsonify({
        'summary': summary,
        'transcript': transcript
    })

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
def cleanup_old_files():
    while True:
        time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å
        current_time = time.time()
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        for folder in [app.config['UPLOAD_FOLDER'], app.config['RESULTS_FOLDER']]:
            for filename in os.listdir(folder):
                file_path = os.path.join(folder, filename)
                if os.path.isfile(file_path) and (current_time - os.path.getmtime(file_path)) > 86400:
                    os.remove(file_path)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ —Å—Ç–∞—Ç—É—Å–æ–≤
        task_ids = list(processing_status.keys())
        for task_id in task_ids:
            result_files = [
                os.path.join(app.config['RESULTS_FOLDER'], f"{task_id}_transcript.txt"),
                os.path.join(app.config['RESULTS_FOLDER'], f"{task_id}_summary.txt")
            ]
            if all(not os.path.exists(f) for f in result_files):
                processing_status.pop(task_id, None)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏
    threading.Thread(target=cleanup_old_files, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host='0.0.0.0', port=5000)